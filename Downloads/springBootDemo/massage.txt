@RestController告诉Spring以字符串的形式渲染结果，并直接返回给调用者。
@EnableAutoConfiguration 。这个注解告诉Spring Boot根据添加的jar依赖猜测你想如何配置Spring。

注解(annotations)列表

@ResponseBody 
用该注解修饰的函数，会将结果直接填充到HTTP的响应体中，一般用于构建RESTful的api；
@Controller 
用于定义控制器类，在spring 项目中由控制器负责将用户发来的URL请求转发到对应的服务接口（service层）。
@RestController 
@ResponseBody和@Controller的合集
@RequestMapping 
提供路由信息，负责URL到Controller中的具体函数的映射。
@EnableAutoConfiguration 
Spring Boot自动配置（auto-configuration）：尝试根据你添加的jar依赖自动配置你的Spring应用。例如，如果你的classpath下存在HSQLDB，并且你没有手动配置任何数据库连接beans，那么我们将自动配置一个内存型（in-memory）数据库”。你可以将@EnableAutoConfiguration或者@SpringBootApplication注解添加到一个@Configuration类上来选择自动配置。如果发现应用了你不想要的特定自动配置类，你可以使用@EnableAutoConfiguration注解的排除属性来禁用它们。例子代码如下：
@ComponentScan 
表示将该类自动发现（扫描）并注册为Bean，可以自动收集所有的Spring组件，包括@Configuration类。我们经常使用@ComponentScan注解搜索beans，并结合@Autowired注解导入。
@Configuration 
相当于传统的xml配置文件，如果有些第三方库需要用到xml文件，建议仍然通过@Configuration类作为项目的配置主类——可以使用@ImportResource注解加载xml配置文件。
@SpringBootApplication 
相当于@EnableAutoConfiguration、@ComponentScan和@Configuration的合集。
@Import 
用来导入其他配置类。
@ImportResource 
用来加载xml配置文件。
@Autowired 
自动导入依赖的bean
@Service 
一般用于修饰service层的组件
@Repository 
使用@Repository注解可以确保DAO或者repositories提供异常转译，这个注解修饰的DAO或者repositories类会被ComponetScan发现并配置，同时也不需要为它们提供XML配置项




//
	我们的main方法通过调用run，将业务委托给了spring Boot的SpringApplication类。SpringApplication将引导我们的应用，启动Spring，
相应地启动被自动配置的Tomcat web服务器。我们需要将 Example.class 作为参数传递给run方法来告诉SpringApplication谁是主要的Spring组件。
为了暴露任何的命令行参数，args数组也会被传递过去。